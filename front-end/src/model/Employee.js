/*
 * BackEndAutoCenterVw
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {User} from './User';

/**
 * The Employee model module.
 * @module model/Employee
 * @version v1
 */
export class Employee {
  /**
   * Constructs a new <code>Employee</code>.
   * @alias module:model/Employee
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Employee</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Employee} obj Optional instance to populate.
   * @return {module:model/Employee} The populated <code>Employee</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Employee();
      if (data.hasOwnProperty('startWorkDate'))
        obj.startWorkDate = ApiClient.convertToType(data['startWorkDate'], 'Date');
      if (data.hasOwnProperty('address'))
        obj.address = ApiClient.convertToType(data['address'], 'String');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'Number');
      if (data.hasOwnProperty('user'))
        obj.user = User.constructFromObject(data['user']);
    }
    return obj;
  }
}

/**
 * @member {Date} startWorkDate
 */
Employee.prototype.startWorkDate = undefined;

/**
 * @member {String} address
 */
Employee.prototype.address = undefined;

/**
 * @member {Number} userId
 */
Employee.prototype.userId = undefined;

/**
 * @member {module:model/User} user
 */
Employee.prototype.user = undefined;

